<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如自成宇宙</title>
  
  <subtitle>chaser</subtitle>
  <link href="https://69854190.github.io/git/atom.xml" rel="self"/>
  
  <link href="https://69854190.github.io/git/"/>
  <updated>2023-04-11T13:10:42.637Z</updated>
  <id>https://69854190.github.io/git/</id>
  
  <author>
    <name>zhoutianming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Stream流</title>
    <link href="https://69854190.github.io/git/2023/04/11/strem-liu/"/>
    <id>https://69854190.github.io/git/2023/04/11/strem-liu/</id>
    <published>2023-04-11T09:18:00.000Z</published>
    <updated>2023-04-11T13:10:42.637Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h5><p>1、Stream流的思想<br>　　Java8新增的Stream是为了解放程序员操作集合(Collection)时的生产力,结合了Lambda表达式，简化集合、数组的操作。Stream流就好像一个高级的迭代器，但只能遍历一次，也可以理解为流水线，在流的过程中对流中的元素进行操作，比如过滤长度为５的字符串，获取中以张开头的字符串等。<br>  2、使用步骤<br> 　　先获取到一条Stream流（流水线），并把数据放上去，然后利用Stream流中的API进行各种操作，这些操作包含过滤、转换等中间方法，也就是方法调用完成后还可以调用其他方法，可以有多个每次返回一个新的流，可进行链式操作，还包含统计、打印等终结方法，只能放在最后且只有一个。</p><h5 id="二、创建流"><a href="#二、创建流" class="headerlink" title="二、创建流"></a>二、创建流</h5><p>　　如果是单列集合直接使用Collection中的默认方法stream()创建流，如果是数组则使用Arrays中的静态方法stream()创建流，也可以使用Stream中的of()方法（底层调用的还是Arrays.stream()），双列集合无法直接使用stream流，需要通过keySet()或者entrySet转成单列集合才能进行流的操作。对于非集合非数组的一堆同类型的数据也可以创建流，调用Stream的of()方法。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、单列集合创建流</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王麻子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2、数组创建流</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>          <span class="token string">"周扒皮"</span><span class="token punctuation">,</span><span class="token string">"杜子腾"</span><span class="token punctuation">,</span><span class="token string">"梅驰趵"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用of()方法数组必须是引用类型的，如果传递基本数据类型会把整个数组当成一个元素。</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3、双列集合创建流</span>      <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"数学"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"语文"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//创建键的Stream流</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//创建键值对的Stream流</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream5 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4、创建一对零散数据的流</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream6 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//使用终结方法遍历打印数据</span>      stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三、Stream流的中间方法"><a href="#三、Stream流的中间方法" class="headerlink" title="三、Stream流的中间方法"></a>三、Stream流的中间方法</h5><p>1、过滤<br>通过 filter() 方法可以从流中筛选出我们想要的元素。<br>filter() 方法接收的是一个 Predicate（Java 8 新增的一个函数式接口，接受一个输入参数返回一个布尔值结果）类型的参数，因此，我们可以直接将一个 Lambda 表达式传递给该方法，比如说 element -&gt; element.contains(“王”) 就是筛选出带有“王”的字符串。每用中间方法一次就会会返回新的Stream流，原来的Stream流只能使用一次，修改Stream流中的数据，不会影响原来集合或者数组中的数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张得美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//过滤出以张开头的字符串，并且遍历打印</span>       <span class="token comment">//forEach() 方法接收的是一个 Consumer（Java 8 新增的一个函数式接口，接受一个输入参数并且无返回的操作）类型的参数，</span>       <span class="token comment">// 类名 :: 方法名是 Java 8 引入的新语法，System.out 返回 PrintStream 类,也就是相当于打印操作   arrayList.stream().filter(list>list.startsWith("张")).forEach(System.out::println);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取元素、跳过元素、去重<br>limit(long maxSize)：获取前几个元素。<br>skip(long n):      跳过前几个元素。<br>distinct():元素去重，依赖hashCode()和equals方法，所有操作自定义JavaBean时记得重写这两个方法。<br>concat()：合并ab两个流为一个流，尽量保持ab数据类型的一致，否则合并的新流的数据类型就是ab数据类型的共同父类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"还有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"励志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"成为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"高手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取“李四” "励志" "成为"</span>     <span class="token comment">//思路：获取前5个元素，再跳过前两个元素</span>     arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//对arr数组中的元素去重</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//合并上面用到的两个流</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、映射<br>如果想通过某种操作把一个流中的元素转化成新的流中的元素，比如转换流中的数据类型，可以使用 map() 方法。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵六六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取字符串长度将其通过map转换成Integer类型的流</span>       <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//以上代码还可以写成</span>       arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map() 方法接收的是一个 Function（Java 8 新增的一个函数式接口，接受一个输入参数 T，返回一个结果 R）类型的参数，此时参数 为 String 类的 length 方法，也就是把 Stream<String> 的流转成一个 Stream<Integer> 的流。  </Integer></String></p><h5 id="四、Stream流的终结方法"><a href="#四、Stream流的终结方法" class="headerlink" title="四、Stream流的终结方法"></a>四、Stream流的终结方法</h5><p>  1、匹配<br>  Stream 类提供了三个方法可供进行元素匹配，它们分别是：<br>anyMatch()，只要有一个元素匹配传入的条件，就返回 true。<br>allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。<br>noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true   </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵六六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//任意一个元素包含六就为true</span>     <span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"六"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyMatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>     <span class="token comment">//必须全部以张开头才为true</span>     <span class="token keyword">boolean</span> allMatch <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allMatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>     <span class="token comment">//只要有一个满足条件，也就是只要有一个元素包含六就为false</span>     <span class="token keyword">boolean</span> noneMatch <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"六"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneMatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  2、组合<br>  reduce() 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法：<br>Optional<T> reduce(BinaryOperator<T> accumulator)<br>没有起始值，只有一个参数，就是运算规则，此时返回 Optional。<br>T reduce(T identity, BinaryOperator<T> accumulator)<br>有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。  </T></T></T></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//没有初始值</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//运算规则可以是 Lambda 表达式（比如 (a, b) -> a + b），也可以是类名::方法名（比如 Integer::sum)</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optional1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//带初始值</span>    <span class="token keyword">int</span> reduce <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> reduce1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 3、常用终结方法<br>  forEach(Consumer action)：遍历，在前面的例子中都有使用，这里就不再举例子了。<br>  count():  统计。<br>  toArray():收集流中的数据，放到数组当中。<br>  collect(Collector collector):收集流中的数据，放到集合中。collect()会在后面的转换流中详细介绍。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵七"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵八"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//统计流中元素个数</span>     <span class="token keyword">long</span> count <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>     <span class="token comment">//收集流中的数据转换为数组</span>     <span class="token comment">//将以赵开头的元素收集为一个新的数组</span>     <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"赵"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h5><p> 既然可以把集合或者数组转成流，那么也应该有对应的方法，将流转换回去——collect() 方法就满足了这种需求。<br> Collectors 是一个收集器的工具类，内置了一系列收集器实现，比如说 toList() 方法将元素收集到一个新的 java.util.List 中；比如说 toCollection() 方法将元素收集到一个新的  java.util.ArrayList 中；比如说 joining() 方法将元素收集到一个可以用分隔符指定的字符串中。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张三-男-12"</span><span class="token punctuation">,</span> <span class="token string">"李四-男-17"</span><span class="token punctuation">,</span> <span class="token string">"王五-女-18"</span><span class="token punctuation">,</span> <span class="token string">"赵六-男-22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//将集合中所有性别为男收集到一个新的Lis集合</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//收集到Set集合</span>     <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringSet <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringSet<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//收集到Map集合，以名字为键，年龄为值</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>             <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                     <span class="token comment">//参数1：键的生成规则</span>                     <span class="token comment">//Function泛型一:表示流中每一个数据的类型</span>                     <span class="token comment">//泛型二：表示Map中键的数据类型</span>                     <span class="token comment">//方法apply的形参：流中的每个数据</span>                     <span class="token comment">//方法体:生成键的代码</span>                     <span class="token comment">//返回值：生成的键</span>                     <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token annotation punctuation">@Override</span>                         <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                             <span class="token class-name">String</span> name <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                             <span class="token keyword">return</span> name<span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span>                     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                     <span class="token comment">//参数2：值的生成规则</span>                     <span class="token comment">//Function泛型一:表示流中每一个数据的类型</span>                     <span class="token comment">//泛型二：表示Map中键的数据类型</span>                     <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token annotation punctuation">@Override</span>                         <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                             <span class="token class-name">String</span> age <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                             <span class="token keyword">return</span> age<span class="token punctuation">;</span>                         <span class="token punctuation">&#125;</span>                     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h5&gt;&lt;p&gt;1、Stream流的思想&lt;br&gt;　　Java8新增的Stream是为了解放程序员操作集合(Collection)时的生产力,</summary>
      
    
    
    
    <category term="javase" scheme="https://69854190.github.io/git/categories/javase/"/>
    
    
    <category term="java" scheme="https://69854190.github.io/git/tags/java/"/>
    
    <category term="stream流" scheme="https://69854190.github.io/git/tags/stream%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://69854190.github.io/git/2023/04/08/zheng-ze-biao-da-shi/"/>
    <id>https://69854190.github.io/git/2023/04/08/zheng-ze-biao-da-shi/</id>
    <published>2023-04-08T09:23:00.000Z</published>
    <updated>2023-04-09T07:27:52.927Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、作用："><a href="#一、作用：" class="headerlink" title="一、作用："></a>一、作用：</h5><p>1、检验字符串是否满足规则。<br>2、在一段文本中查找满足要求的内容。</p><h5 id="二、基本规则："><a href="#二、基本规则：" class="headerlink" title="二、基本规则："></a>二、基本规则：</h5><p><img src="/images/2023-04-08-01.png"><br><img src="/images/2023-04-08-02.png"><br><img src="/images/2023-04-08-03.png"> </p><h5 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h5><p>1、验证手机号码格式。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法:写一个正确格式的数据从左到右依次书写</span> <span class="token comment">//手机号格式:以1开头，第二位范围3-9，剩余9位任意数字范围</span> <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12234567899"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"13412345678"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"134123456789"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、验证邮箱格式。   </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 思路：@的左边，任意字母数字下划线至少出现一次\\w+ @只能出现一次 .的左边，任意字母数字除下划线，出现2-7次[\\w&amp;&amp;[^_]]&#123;2,7&#125; .用\\.表示（转义） .的右边：任意大小写字母，出现2-3次，整个.的右边可以看作一组重复1-2次*/</span> <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@q.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1232@123.com.cn"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　正则表达式不用刻意记其规则，能看懂就行，使用时只需要百度然后改成自己需要的就行。可以安装Idea的插件any-rule，在使用时只需右键单击AnyRule就可以选择自己所需要的表达式（注意转义)。</p><h5 id="四、正则表达式爬取信息"><a href="#四、正则表达式爬取信息" class="headerlink" title="四、正则表达式爬取信息"></a>四、正则表达式爬取信息</h5><p>1、爬取本地文本信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从指定内容爬取出邮箱和手机号</span>      <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"大家好，我是练习时长两年半的个人练习生，蔡旭坤，"</span> <span class="token operator">+</span>              <span class="token string">"喜欢唱跳rap篮球，我的手机号bu是13212345678，我的邮箱bu是123@321.com,谢谢大家！只因你太美 baby~~~"</span><span class="token punctuation">;</span>       <span class="token comment">//1.定义爬取规则(多个规则用|隔开)</span>       <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;|"</span><span class="token operator">+</span><span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span>       <span class="token comment">//2.调用Pattern的compile方法编译正则表达式，获取匹配规则对象</span>       <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//3.通过匹配器规则对象获取匹配数据内容的匹配器对象</span>       <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//4.find()匹配数据内容的匹配器会从头开始读取寻找满足规则的字串，</span>       <span class="token comment">// 如果有返回true会在底层记录字串的起始索引和结束索引+1</span>       <span class="token comment">//5.通过匹配器从内容中爬取信息</span>       <span class="token comment">//String group()方法底层会根据find()记录的索引进行截取，并返回截取到的字串</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、爬取网络数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个URL对象</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://so.qqdna.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接网站</span>        <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建字符缓冲流读取网站数据</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每次读取一行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、带条件的爬取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> content<span class="token operator">=</span>"java自从<span class="token number">95</span>年问世以来，经历了很多版本，目前企业中用的最多的是<span class="token class-name">Java8</span>和<span class="token class-name">Java11</span>，" <span class="token operator">+</span>"因为这两个是长期支持版本，下一个长期支持版本是java17，相信未来不久<span class="token class-name">Java17</span>也会逐渐登上历史舞台。"<span class="token punctuation">;</span>       <span class="token comment">//需求1:爬取版本号为8，11，17的Java文本，只显示java不带版本号</span>       <span class="token comment">//?表示占位符，可以理解为前面的数据java</span>       <span class="token comment">//=表示在数据java后面要跟随的数据条件</span>       <span class="token class-name">String</span> regex1<span class="token operator">=</span><span class="token string">"java(?=8|11|17)"</span><span class="token punctuation">;</span>       <span class="token comment">//忽略大小写(?i)</span>       <span class="token class-name">String</span> regex2<span class="token operator">=</span><span class="token string">"((?i)java)(?=8|11|17)"</span><span class="token punctuation">;</span>       <span class="token comment">//需求2：爬取版本号为8，11，17的Java文本，带版本号</span>       <span class="token comment">//:表示java后面要跟随的数据</span>       <span class="token class-name">String</span> regex3<span class="token operator">=</span><span class="token string">"((?i)java)(?:8|11|17)"</span><span class="token punctuation">;</span>       <span class="token comment">//需求3：爬取除了版本号为8，11，17的Java文本</span>       <span class="token comment">//！表示除了</span>       <span class="token class-name">String</span> regex4<span class="token operator">=</span><span class="token string">"((?i)java)(?!8|11|17)"</span><span class="token punctuation">;</span>       <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、贪婪爬取。<br>指在爬取的时候尽可能多的爬取数据，反之就是非贪婪爬取，Java中默认的是贪婪爬取，如果在数量词+ * 的后面加上问号，就是非贪婪爬取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"java自从95年问世以来，abbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaa经历了很多版本，目前企业中用的最多的是Java8和Java11，"</span> <span class="token operator">+</span>               <span class="token string">"因为这两个是长期支持版本，下一个长期支持版本是java17，相信未来不久Java17也会逐渐登上历史舞台。"</span><span class="token punctuation">;</span>       <span class="token comment">//需求:按照ab+的方式爬取ab，b尽可能多的获取。(贪婪爬取)</span>       <span class="token class-name">String</span> regex1<span class="token operator">=</span><span class="token string">"ab+"</span><span class="token punctuation">;</span>       <span class="token comment">//需求：按照ab+的方式爬取ab，b尽可能少的获取。(非贪婪爬取)</span>       <span class="token comment">//只需要在量词后面加?</span>       <span class="token class-name">String</span> regex2<span class="token operator">=</span><span class="token string">"ab+?"</span><span class="token punctuation">;</span>       <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="五、捕获分组和非捕获分组"><a href="#五、捕获分组和非捕获分组" class="headerlink" title="五、捕获分组和非捕获分组"></a>五、捕获分组和非捕获分组</h5><p>   1、分组规则:()括起来为一组，从1开始连续不间断，以左括号为基准，最左边是第一组，依次为第二组，以此类推。<br>   2、捕获分组就是把这组的数据捕获出来再用一次，使用方法为\组号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//需求1：判断一个字符串的开始部分和结束部分是否一致，可以有多个字符</span>    <span class="token comment">//举例：vvv123vvv cc666bcc</span>    <span class="token class-name">String</span> regex1<span class="token operator">=</span><span class="token string">"(.+).+\\1"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abd12abd"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abd12abcd"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求2：判断一个字符串的开始部分和结束部分是否一致,开始部分每个字符也需要一致</span>    <span class="token comment">//思路：首字母看作一组，首字母捕获分组多次使用（注意组号规则）</span>    <span class="token class-name">String</span> regex2<span class="token operator">=</span><span class="token string">"((.)\\2 *).+\\1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、可以在正则外部使用$组号来复用本组数据。<br>4、非捕获分组指分组之后不在用本组数据，不带组号，仅仅把数据括起来，在带条件爬取案例中有使用。(?:正则)表示获取所有，(?&#x3D;正则)表示获取前面部分，(?!正则)表示除了指定内容的前面部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、作用：&quot;&gt;&lt;a href=&quot;#一、作用：&quot; class=&quot;headerlink&quot; title=&quot;一、作用：&quot;&gt;&lt;/a&gt;一、作用：&lt;/h5&gt;&lt;p&gt;1、检验字符串是否满足规则。&lt;br&gt;2、在一段文本中查找满足要求的内容。&lt;/p&gt;
&lt;h5 id=&quot;二、基本规则：&quot;&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://69854190.github.io/git/categories/java/"/>
    
    
    <category term="java常用api" scheme="https://69854190.github.io/git/tags/java%E5%B8%B8%E7%94%A8api/"/>
    
  </entry>
  
  <entry>
    <title>图片插入测试</title>
    <link href="https://69854190.github.io/git/2023/04/07/tu-pian-cha-ru-ce-shi/"/>
    <id>https://69854190.github.io/git/2023/04/07/tu-pian-cha-ru-ce-shi/</id>
    <published>2023-04-07T09:39:00.000Z</published>
    <updated>2023-04-07T10:07:46.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo插入图片方式汇总"><a href="#hexo插入图片方式汇总" class="headerlink" title="hexo插入图片方式汇总"></a>hexo插入图片方式汇总</h1><p>1、本地图片复制粘贴：删除第一个和最后一个<br><img src="/.io//%5Cimages%5Cpasted-2.png" alt="upload successful"><br>2、在source中新建一个images目录存放图片<img src="/images/pasted-0.png" alt="描述"><br>3、通过&lt;% asset_img 图片与md文件同名文件夹下%&gt;<br>&lt;% asset_img a.jpg 描述 %&gt;(失败)</p><p>4、插入网络图片：<img src="http://rs43ryrv3.bkt.clouddn.com/2023/03/29/db8a13f2c62c48749d1147bc2c93a423.jpg" alt="描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo插入图片方式汇总&quot;&gt;&lt;a href=&quot;#hexo插入图片方式汇总&quot; class=&quot;headerlink&quot; title=&quot;hexo插入图片方式汇总&quot;&gt;&lt;/a&gt;hexo插入图片方式汇总&lt;/h1&gt;&lt;p&gt;1、本地图片复制粘贴：删除第一个和最后一个&lt;br&gt;&lt;img </summary>
      
    
    
    
    <category term="markdown" scheme="https://69854190.github.io/git/categories/markdown/"/>
    
    
    <category term="markdown语法" scheme="https://69854190.github.io/git/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>EL表达式</title>
    <link href="https://69854190.github.io/git/2022/12/18/el/"/>
    <id>https://69854190.github.io/git/2022/12/18/el/</id>
    <published>2022-12-18T11:53:09.450Z</published>
    <updated>2023-03-13T10:46:08.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-EL表达式概述"><a href="#一、-EL表达式概述" class="headerlink" title="一、 EL表达式概述"></a>一、 EL表达式概述</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>  Expression Language表达式语言,用于简化JSP页面内的Java代码。</p><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><p>  获取数据。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>  <font color="red">${Expression表达式内容:</font>}</p><table><thead><tr><th>Java代码块</th><th>JSP表达式</th><th>EL表达式</th></tr></thead><tbody><tr><td>&lt;% out.println(request.getAttribute(“userName”));%&gt;</td><td>&lt;%&#x3D;request.getAttribute(“userName”)%&gt;</td><td><font color="red">${userName}</font></td></tr></tbody></table><p><font color="red">注意:</font>  有些时候我们使用EL表达式来获取后端塞在请求域的数据时，发现获取不到，这是因为jsp默认开启了 <font color="pink">isELIgnored </font>这个属性，它的作用是忽略EL表达式。所以我们必须要将它给关闭了。</p><p>    <code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</code></p><p>JavaWeb的四大域对象：</p><ol><li><p>page: 当前页面有效</p></li><li><p>request: 当前请求有效</p></li><li><p>session: 当前会话有效</p></li><li><p>application: 当前应用有效</p><p><font color="red">EL表达式获取数据，会依次从这4个域中寻找，直到找到为止</font></p></li></ol><h2 id="二、-EL运算符"><a href="#二、-EL运算符" class="headerlink" title="二、 EL运算符"></a>二、 EL运算符</h2><h4 id="EL算术运算符"><a href="#EL算术运算符" class="headerlink" title="EL算术运算符"></a>EL算术运算符</h4><p><font color="red">注意：</font>EL的”+”运算符无法拼字符串，如果该运算符连接的两个值不能转换为数值型的字符串，则会抛出异常。EL表达式中可以用()改变优先级。</p><h4 id="EL比较运算符"><a href="#EL比较运算符" class="headerlink" title="EL比较运算符"></a>EL比较运算符</h4><p><img src="/.io//Users\zhoutianming\AppData\Roaming\marktext\images\2022-12-18-21-58-30-image.png"></p><h4 id="EL其他运算符："><a href="#EL其他运算符：" class="headerlink" title="EL其他运算符："></a>EL其他运算符：</h4><p>.和[ ]</p><p><font color="yellow">.</font>和 <font color="yellow">[ ]</font>用来访问JavaBean中的属性和隐式对象的数据，一般情况下，.用来访问JavaBean属性或Map类型的值，<font color="yellow">[ ]</font>用来访问数组或者列表的元素。当存取的属性名称中包含特殊字符就一定要使用[ ],如果要获取动态取值用[ ], .无法动态取值。</p><p>empty</p><p>empty用来判断EL表达式中的对象或者变量是否为空。为空或者null返回true，否则返回false。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-EL表达式概述&quot;&gt;&lt;a href=&quot;#一、-EL表达式概述&quot; class=&quot;headerlink&quot; title=&quot;一、 EL表达式概述&quot;&gt;&lt;/a&gt;一、 EL表达式概述&lt;/h2&gt;&lt;h4 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;header</summary>
      
    
    
    
    <category term="    javaWeb" scheme="https://69854190.github.io/git/categories/javaWeb/"/>
    
    
    <category term="Java" scheme="https://69854190.github.io/git/tags/Java/"/>
    
  </entry>
  
</feed>
