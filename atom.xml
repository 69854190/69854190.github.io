<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如自成宇宙</title>
  
  <subtitle>chaser</subtitle>
  <link href="https://69854190.github.io/git/atom.xml" rel="self"/>
  
  <link href="https://69854190.github.io/git/"/>
  <updated>2023-04-09T06:50:30.900Z</updated>
  <id>https://69854190.github.io/git/</id>
  
  <author>
    <name>zhoutianming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://69854190.github.io/git/2023/04/08/zheng-ze-biao-da-shi/"/>
    <id>https://69854190.github.io/git/2023/04/08/zheng-ze-biao-da-shi/</id>
    <published>2023-04-08T09:23:00.000Z</published>
    <updated>2023-04-09T06:50:30.900Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、作用："><a href="#一、作用：" class="headerlink" title="一、作用："></a>一、作用：</h5><p>1、检验字符串是否满足规则。<br>2、在一段文本中查找满足要求的内容。</p><h5 id="二、基本规则："><a href="#二、基本规则：" class="headerlink" title="二、基本规则："></a>二、基本规则：</h5><p><img src="/images/2023-04-08-01.png"><br><img src="/images/2023-04-08-02.png"><br><img src="/images/2023-04-08-03.png"> </p><h5 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h5><p>1、验证手机号码格式。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法:写一个正确格式的数据从左到右依次书写</span> <span class="token comment">//手机号格式:以1开头，第二位范围3-9，剩余9位任意数字范围</span> <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12234567899"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"13412345678"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"134123456789"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、验证邮箱格式。   </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 思路：@的左边，任意字母数字下划线至少出现一次\\w+ @只能出现一次 .的左边，任意字母数字除下划线，出现2-7次[\\w&amp;&amp;[^_]]&#123;2,7&#125; .用\\.表示（转义） .的右边：任意大小写字母，出现2-3次，整个.的右边可以看作一组重复1-2次*/</span> <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@q.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1232@123.com.cn"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　正则表达式不用刻意记其规则，能看懂就行，使用时只需要百度然后改成自己需要的就行。可以安装Idea的插件any-rule，在使用时只需右键单击AnyRule就可以选择自己所需要的表达式（注意转义)。</p><h5 id="四、正则表达式爬取信息"><a href="#四、正则表达式爬取信息" class="headerlink" title="四、正则表达式爬取信息"></a>四、正则表达式爬取信息</h5><p>1、爬取本地文本信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从指定内容爬取出邮箱和手机号</span>      <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"大家好，我是练习时长两年半的个人练习生，蔡旭坤，"</span> <span class="token operator">+</span>              <span class="token string">"喜欢唱跳rap篮球，我的手机号bu是13212345678，我的邮箱bu是123@321.com,谢谢大家！只因你太美 baby~~~"</span><span class="token punctuation">;</span>       <span class="token comment">//1.定义爬取规则(多个规则用|隔开)</span>       <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;|"</span><span class="token operator">+</span><span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span>       <span class="token comment">//2.调用Pattern的compile方法编译正则表达式，获取匹配规则对象</span>       <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//3.通过匹配器规则对象获取匹配数据内容的匹配器对象</span>       <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//4.find()匹配数据内容的匹配器会从头开始读取寻找满足规则的字串，</span>       <span class="token comment">// 如果有返回true会在底层记录字串的起始索引和结束索引+1</span>       <span class="token comment">//5.通过匹配器从内容中爬取信息</span>       <span class="token comment">//String group()方法底层会根据find()记录的索引进行截取，并返回截取到的字串</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、爬取网络数据</p><pre><code class="java">//创建一个URL对象        URL url = new URL(&quot;http://so.qqdna.com/&quot;);        //连接网站        URLConnection urlConnection = url.openConnection();        //创建字符缓冲流读取网站数据        BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));        String line;        String regex=&quot;1[3-9]\\d&#123;9&#125;&quot;;        Pattern pattern = Pattern.compile(regex);        //每次读取一行        while ((line=reader.readLine())!=null)&#123;            Matcher matcher = pattern.matcher(line);            while (matcher.find())&#123;                System.out.println(matcher.group());            &#125;        &#125;        reader.close();      </code></pre><p>3、带条件的爬取。  </p><pre><code class="java"> String content=&quot;java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot; +                &quot;因为这两个是长期支持版本，下一个长期支持版本是java17，相信未来不久Java17也会逐渐登上历史舞台。&quot;;        //需求1:爬取版本号为8，11，17的Java文本，只显示java不带版本号        //?表示占位符，可以理解为前面的数据java        //=表示在数据java后面要跟随的数据条件        String regex1=&quot;java(?=8|11|17)&quot;;        //忽略大小写(?i)        String regex2=&quot;((?i)java)(?=8|11|17)&quot;;        //需求2：爬取版本号为8，11，17的Java文本，带版本号        //:表示java后面要跟随的数据        String regex3=&quot;((?i)java)(?:8|11|17)&quot;;        //需求3：爬取除了版本号为8，11，17的Java文本        //！表示除了        String regex4=&quot;((?i)java)(?!8|11|17)&quot;;        Pattern pattern = Pattern.compile(regex3);        Matcher matcher = pattern.matcher(content);        while (matcher.find())&#123;            System.out.println(matcher.group());        &#125;</code></pre><p>4、贪婪爬取。<br>指在爬取的时候尽可能多的爬取数据，反之就是非贪婪爬取，Java中默认的是贪婪爬取，如果在数量词+ * 的后面加上问号，就是非贪婪爬取。</p><pre><code class="java"> String content=&quot;java自从95年问世以来，abbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaa经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot; +                &quot;因为这两个是长期支持版本，下一个长期支持版本是java17，相信未来不久Java17也会逐渐登上历史舞台。&quot;;        //需求:按照ab+的方式爬取ab，b尽可能多的获取。(贪婪爬取)        String regex1=&quot;ab+&quot;;        //需求：按照ab+的方式爬取ab，b尽可能少的获取。(非贪婪爬取)        //只需要在量词后面加?        String regex2=&quot;ab+?&quot;;        Pattern pattern = Pattern.compile(regex2);        Matcher matcher = pattern.matcher(content);        while (matcher.find())&#123;            System.out.println(matcher.group());        &#125;        ```             ##### 五、捕获分组和非捕获分组   1、分组规则:()括起来为一组，从1开始连续不间断，以左括号为基准，最左边是第一组，依次为第二组，以此类推。     2、捕获分组就是把这组的数据捕获出来再用一次，使用方法为\\组号   ```java    //需求1：判断一个字符串的开始部分和结束部分是否一致，可以有多个字符        //举例：vvv123vvv cc666bcc        String regex1=&quot;(.+).+\\1&quot;;        System.out.println(&quot;abd12abd&quot;.matches(regex1));        System.out.println(&quot;abd12abcd&quot;.matches(regex1));        //需求2：判断一个字符串的开始部分和结束部分是否一致,开始部分每个字符也需要一致        //思路：首字母看作一组，首字母捕获分组多次使用（注意组号规则）        String regex2=&quot;((.)\\2 *).+\\1&quot;;        ```  3、可以在正则外部使用$组号来复用本组数据。  4、非捕获分组指分组之后不在用本组数据，不带组号，仅仅把数据括起来，在带条件爬取案例中有使用。(?:正则)表示获取所有，(?=正则)表示获取前面部分，(?!正则)表示除了指定内容的前面部分。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、作用：&quot;&gt;&lt;a href=&quot;#一、作用：&quot; class=&quot;headerlink&quot; title=&quot;一、作用：&quot;&gt;&lt;/a&gt;一、作用：&lt;/h5&gt;&lt;p&gt;1、检验字符串是否满足规则。&lt;br&gt;2、在一段文本中查找满足要求的内容。&lt;/p&gt;
&lt;h5 id=&quot;二、基本规则：&quot;&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://69854190.github.io/git/categories/java/"/>
    
    
    <category term="java常用api" scheme="https://69854190.github.io/git/tags/java%E5%B8%B8%E7%94%A8api/"/>
    
  </entry>
  
  <entry>
    <title>图片插入测试</title>
    <link href="https://69854190.github.io/git/2023/04/07/tu-pian-cha-ru-ce-shi/"/>
    <id>https://69854190.github.io/git/2023/04/07/tu-pian-cha-ru-ce-shi/</id>
    <published>2023-04-07T09:39:00.000Z</published>
    <updated>2023-04-07T10:07:46.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo插入图片方式汇总"><a href="#hexo插入图片方式汇总" class="headerlink" title="hexo插入图片方式汇总"></a>hexo插入图片方式汇总</h1><p>1、本地图片复制粘贴：删除第一个和最后一个<br><img src="/.io//%5Cimages%5Cpasted-2.png" alt="upload successful"><br>2、在source中新建一个images目录存放图片<img src="/images/pasted-0.png" alt="描述"><br>3、通过&lt;% asset_img 图片与md文件同名文件夹下%&gt;<br>&lt;% asset_img a.jpg 描述 %&gt;(失败)</p><p>4、插入网络图片：<img src="http://rs43ryrv3.bkt.clouddn.com/2023/03/29/db8a13f2c62c48749d1147bc2c93a423.jpg" alt="描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo插入图片方式汇总&quot;&gt;&lt;a href=&quot;#hexo插入图片方式汇总&quot; class=&quot;headerlink&quot; title=&quot;hexo插入图片方式汇总&quot;&gt;&lt;/a&gt;hexo插入图片方式汇总&lt;/h1&gt;&lt;p&gt;1、本地图片复制粘贴：删除第一个和最后一个&lt;br&gt;&lt;img </summary>
      
    
    
    
    <category term="markdown" scheme="https://69854190.github.io/git/categories/markdown/"/>
    
    
    <category term="markdown语法" scheme="https://69854190.github.io/git/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>EL表达式</title>
    <link href="https://69854190.github.io/git/2022/12/18/el/"/>
    <id>https://69854190.github.io/git/2022/12/18/el/</id>
    <published>2022-12-18T11:53:09.450Z</published>
    <updated>2023-03-13T10:46:08.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-EL表达式概述"><a href="#一、-EL表达式概述" class="headerlink" title="一、 EL表达式概述"></a>一、 EL表达式概述</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>  Expression Language表达式语言,用于简化JSP页面内的Java代码。</p><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><p>  获取数据。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>  <font color="red">${Expression表达式内容:</font>}</p><table><thead><tr><th>Java代码块</th><th>JSP表达式</th><th>EL表达式</th></tr></thead><tbody><tr><td>&lt;% out.println(request.getAttribute(“userName”));%&gt;</td><td>&lt;%&#x3D;request.getAttribute(“userName”)%&gt;</td><td><font color="red">${userName}</font></td></tr></tbody></table><p><font color="red">注意:</font>  有些时候我们使用EL表达式来获取后端塞在请求域的数据时，发现获取不到，这是因为jsp默认开启了 <font color="pink">isELIgnored </font>这个属性，它的作用是忽略EL表达式。所以我们必须要将它给关闭了。</p><p>    <code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</code></p><p>JavaWeb的四大域对象：</p><ol><li><p>page: 当前页面有效</p></li><li><p>request: 当前请求有效</p></li><li><p>session: 当前会话有效</p></li><li><p>application: 当前应用有效</p><p><font color="red">EL表达式获取数据，会依次从这4个域中寻找，直到找到为止</font></p></li></ol><h2 id="二、-EL运算符"><a href="#二、-EL运算符" class="headerlink" title="二、 EL运算符"></a>二、 EL运算符</h2><h4 id="EL算术运算符"><a href="#EL算术运算符" class="headerlink" title="EL算术运算符"></a>EL算术运算符</h4><p><font color="red">注意：</font>EL的”+”运算符无法拼字符串，如果该运算符连接的两个值不能转换为数值型的字符串，则会抛出异常。EL表达式中可以用()改变优先级。</p><h4 id="EL比较运算符"><a href="#EL比较运算符" class="headerlink" title="EL比较运算符"></a>EL比较运算符</h4><p><img src="/.io//Users\zhoutianming\AppData\Roaming\marktext\images\2022-12-18-21-58-30-image.png"></p><h4 id="EL其他运算符："><a href="#EL其他运算符：" class="headerlink" title="EL其他运算符："></a>EL其他运算符：</h4><p>.和[ ]</p><p><font color="yellow">.</font>和 <font color="yellow">[ ]</font>用来访问JavaBean中的属性和隐式对象的数据，一般情况下，.用来访问JavaBean属性或Map类型的值，<font color="yellow">[ ]</font>用来访问数组或者列表的元素。当存取的属性名称中包含特殊字符就一定要使用[ ],如果要获取动态取值用[ ], .无法动态取值。</p><p>empty</p><p>empty用来判断EL表达式中的对象或者变量是否为空。为空或者null返回true，否则返回false。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-EL表达式概述&quot;&gt;&lt;a href=&quot;#一、-EL表达式概述&quot; class=&quot;headerlink&quot; title=&quot;一、 EL表达式概述&quot;&gt;&lt;/a&gt;一、 EL表达式概述&lt;/h2&gt;&lt;h4 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;header</summary>
      
    
    
    
    <category term="    javaWeb" scheme="https://69854190.github.io/git/categories/javaWeb/"/>
    
    
    <category term="Java" scheme="https://69854190.github.io/git/tags/Java/"/>
    
  </entry>
  
</feed>
