<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/04/08/zheng-ze-biao-da-shi/"/>
      <url>/2023/04/08/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h5 id="一、作用："><a href="#一、作用：" class="headerlink" title="一、作用："></a>一、作用：</h5><p>1、检验字符串是否满足规则。<br>2、在一段文本中查找满足要求的内容。</p><h5 id="二、基本规则："><a href="#二、基本规则：" class="headerlink" title="二、基本规则："></a>二、基本规则：</h5><p><img src="/images/2023-04-08-01.png"><br><img src="/images/2023-04-08-02.png"><br><img src="/images/2023-04-08-03.png"> </p><h5 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h5><p>1、验证手机号码格式。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法:写一个正确格式的数据从左到右依次书写</span> <span class="token comment">//手机号格式:以1开头，第二位范围3-9，剩余9位任意数字范围</span> <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12234567899"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"13412345678"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"134123456789"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、验证邮箱格式。   </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 思路：@的左边，任意字母数字下划线至少出现一次\\w+ @只能出现一次 .的左边，任意字母数字除下划线，出现2-7次[\\w&amp;&amp;[^_]]&#123;2,7&#125; .用\\.表示（转义） .的右边：任意大小写字母，出现2-3次，整个.的右边可以看作一组重复1-2次*/</span> <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@@qq.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123@q.com"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1232@123.com.cn"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　正则表达式不用刻意记其规则，能看懂就行，使用时只需要百度然后改成自己需要的就行。可以安装Idea的插件any-rule，在使用时只需右键单击AnyRule就可以选择自己所需要的表达式（注意转义)。</p><h5 id="四、正则表达式爬取信息"><a href="#四、正则表达式爬取信息" class="headerlink" title="四、正则表达式爬取信息"></a>四、正则表达式爬取信息</h5><p>1、爬取本地文本信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从指定内容爬取出邮箱和手机号</span>      <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"大家好，我是练习时长两年半的个人练习生，蔡旭坤，"</span> <span class="token operator">+</span>              <span class="token string">"喜欢唱跳rap篮球，我的手机号bu是13212345678，我的邮箱bu是123@321.com,谢谢大家！只因你太美 baby~~~"</span><span class="token punctuation">;</span>       <span class="token comment">//1.定义爬取规则(多个规则用|隔开)</span>       <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;|"</span><span class="token operator">+</span><span class="token string">"\\w+@[\\w&amp;&amp;[^_]]&#123;2,7&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;"</span><span class="token punctuation">;</span>       <span class="token comment">//2.调用Pattern的compile方法编译正则表达式，获取匹配规则对象</span>       <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//3.通过匹配器规则对象获取匹配数据内容的匹配器对象</span>       <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//4.find()匹配数据内容的匹配器会从头开始读取寻找满足规则的字串，</span>       <span class="token comment">// 如果有返回true会在底层记录字串的起始索引和结束索引+1</span>       <span class="token comment">//5.通过匹配器从内容中爬取信息</span>       <span class="token comment">//String group()方法底层会根据find()记录的索引进行截取，并返回截取到的字串</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、爬取网络数据（可复制显示不了） </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个URL对象</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://so.qqdna.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接网站</span>        <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建字符缓冲流读取网站数据</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token class-name">String</span> regex<span class="token operator">=</span><span class="token string">"1[3-9]\\d&#123;9&#125;"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每次读取一行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片插入测试</title>
      <link href="/2023/04/07/tu-pian-cha-ru-ce-shi/"/>
      <url>/2023/04/07/tu-pian-cha-ru-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo插入图片方式汇总"><a href="#hexo插入图片方式汇总" class="headerlink" title="hexo插入图片方式汇总"></a>hexo插入图片方式汇总</h1><p>1、本地图片复制粘贴：删除第一个和最后一个<br><img src="/.io//%5Cimages%5Cpasted-2.png" alt="upload successful"><br>2、在source中新建一个images目录存放图片<img src="/images/pasted-0.png" alt="描述"><br>3、通过&lt;% asset_img 图片与md文件同名文件夹下%&gt;<br>&lt;% asset_img a.jpg 描述 %&gt;(失败)</p><p>4、插入网络图片：<img src="http://rs43ryrv3.bkt.clouddn.com/2023/03/29/db8a13f2c62c48749d1147bc2c93a423.jpg" alt="描述"></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式</title>
      <link href="/2022/12/18/el/"/>
      <url>/2022/12/18/el/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-EL表达式概述"><a href="#一、-EL表达式概述" class="headerlink" title="一、 EL表达式概述"></a>一、 EL表达式概述</h2><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>  Expression Language表达式语言,用于简化JSP页面内的Java代码。</p><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><p>  获取数据。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>  <font color="red">${Expression表达式内容:</font>}</p><table><thead><tr><th>Java代码块</th><th>JSP表达式</th><th>EL表达式</th></tr></thead><tbody><tr><td>&lt;% out.println(request.getAttribute(“userName”));%&gt;</td><td>&lt;%&#x3D;request.getAttribute(“userName”)%&gt;</td><td><font color="red">${userName}</font></td></tr></tbody></table><p><font color="red">注意:</font>  有些时候我们使用EL表达式来获取后端塞在请求域的数据时，发现获取不到，这是因为jsp默认开启了 <font color="pink">isELIgnored </font>这个属性，它的作用是忽略EL表达式。所以我们必须要将它给关闭了。</p><p>    <code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</code></p><p>JavaWeb的四大域对象：</p><ol><li><p>page: 当前页面有效</p></li><li><p>request: 当前请求有效</p></li><li><p>session: 当前会话有效</p></li><li><p>application: 当前应用有效</p><p><font color="red">EL表达式获取数据，会依次从这4个域中寻找，直到找到为止</font></p></li></ol><h2 id="二、-EL运算符"><a href="#二、-EL运算符" class="headerlink" title="二、 EL运算符"></a>二、 EL运算符</h2><h4 id="EL算术运算符"><a href="#EL算术运算符" class="headerlink" title="EL算术运算符"></a>EL算术运算符</h4><p><font color="red">注意：</font>EL的”+”运算符无法拼字符串，如果该运算符连接的两个值不能转换为数值型的字符串，则会抛出异常。EL表达式中可以用()改变优先级。</p><h4 id="EL比较运算符"><a href="#EL比较运算符" class="headerlink" title="EL比较运算符"></a>EL比较运算符</h4><p><img src="/.io//Users\zhoutianming\AppData\Roaming\marktext\images\2022-12-18-21-58-30-image.png"></p><h4 id="EL其他运算符："><a href="#EL其他运算符：" class="headerlink" title="EL其他运算符："></a>EL其他运算符：</h4><p>.和[ ]</p><p><font color="yellow">.</font>和 <font color="yellow">[ ]</font>用来访问JavaBean中的属性和隐式对象的数据，一般情况下，.用来访问JavaBean属性或Map类型的值，<font color="yellow">[ ]</font>用来访问数组或者列表的元素。当存取的属性名称中包含特殊字符就一定要使用[ ],如果要获取动态取值用[ ], .无法动态取值。</p><p>empty</p><p>empty用来判断EL表达式中的对象或者变量是否为空。为空或者null返回true，否则返回false。</p>]]></content>
      
      
      <categories>
          
          <category>     javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
